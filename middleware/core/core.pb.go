// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// 	codegen	v0.0.0-SNAPSHOT-05711fb
// 	go		go1.22.3
// source: core.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 0	-	100 	xerror包占用
// 100	-	1000	http status code
// 1000 -	2000	core 占用
// 2000 - 10000
type ErrCode int32

const (
	ErrCode_Success ErrCode = 0
	// 100	-	1000	http status code
	ErrCode_StatusContinue                      ErrCode = 100
	ErrCode_StatusSwitchingProtocols            ErrCode = 101
	ErrCode_StatusProcessing                    ErrCode = 102
	ErrCode_StatusEarlyHints                    ErrCode = 103
	ErrCode_StatusOK                            ErrCode = 200
	ErrCode_StatusCreated                       ErrCode = 201
	ErrCode_StatusAccepted                      ErrCode = 202
	ErrCode_StatusNonAuthoritativeInfo          ErrCode = 203
	ErrCode_StatusNoContent                     ErrCode = 204
	ErrCode_StatusResetContent                  ErrCode = 205
	ErrCode_StatusPartialContent                ErrCode = 206
	ErrCode_StatusMultiStatus                   ErrCode = 207
	ErrCode_StatusAlreadyReported               ErrCode = 208
	ErrCode_StatusIMUsed                        ErrCode = 226
	ErrCode_StatusMultipleChoices               ErrCode = 300
	ErrCode_StatusMovedPermanently              ErrCode = 301
	ErrCode_StatusFound                         ErrCode = 302
	ErrCode_StatusSeeOther                      ErrCode = 303
	ErrCode_StatusNotModified                   ErrCode = 304
	ErrCode_StatusUseProxy                      ErrCode = 305
	ErrCode_StatusTemporaryRedirect             ErrCode = 307
	ErrCode_StatusPermanentRedirect             ErrCode = 308
	ErrCode_StatusBadRequest                    ErrCode = 400
	ErrCode_StatusUnauthorized                  ErrCode = 401
	ErrCode_StatusPaymentRequired               ErrCode = 402
	ErrCode_StatusForbidden                     ErrCode = 403
	ErrCode_StatusNotFound                      ErrCode = 404
	ErrCode_StatusMethodNotAllowed              ErrCode = 405
	ErrCode_StatusNotAcceptable                 ErrCode = 406
	ErrCode_StatusProxyAuthRequired             ErrCode = 407
	ErrCode_StatusRequestTimeout                ErrCode = 408
	ErrCode_StatusConflict                      ErrCode = 409
	ErrCode_StatusGone                          ErrCode = 410
	ErrCode_StatusLengthRequired                ErrCode = 411
	ErrCode_StatusPreconditionFailed            ErrCode = 412
	ErrCode_StatusRequestEntityTooLarge         ErrCode = 413
	ErrCode_StatusRequestURITooLong             ErrCode = 414
	ErrCode_StatusUnsupportedMediaType          ErrCode = 415
	ErrCode_StatusRequestedRangeNotSatisfiable  ErrCode = 416
	ErrCode_StatusExpectationFailed             ErrCode = 417
	ErrCode_StatusTeapot                        ErrCode = 418
	ErrCode_StatusMisdirectedRequest            ErrCode = 421
	ErrCode_StatusUnprocessableEntity           ErrCode = 422
	ErrCode_StatusLocked                        ErrCode = 423
	ErrCode_StatusFailedDependency              ErrCode = 424
	ErrCode_StatusTooEarly                      ErrCode = 425
	ErrCode_StatusUpgradeRequired               ErrCode = 426
	ErrCode_StatusPreconditionRequired          ErrCode = 428
	ErrCode_StatusTooManyRequests               ErrCode = 429
	ErrCode_StatusRequestHeaderFieldsTooLarge   ErrCode = 431
	ErrCode_StatusUnavailableForLegalReasons    ErrCode = 451
	ErrCode_StatusInternalServerError           ErrCode = 500
	ErrCode_StatusNotImplemented                ErrCode = 501
	ErrCode_StatusBadGateway                    ErrCode = 502
	ErrCode_StatusServiceUnavailable            ErrCode = 503
	ErrCode_StatusGatewayTimeout                ErrCode = 504
	ErrCode_StatusHTTPVersionNotSupported       ErrCode = 505
	ErrCode_StatusVariantAlsoNegotiates         ErrCode = 506
	ErrCode_StatusInsufficientStorage           ErrCode = 507
	ErrCode_StatusLoopDetected                  ErrCode = 508
	ErrCode_StatusNotExtended                   ErrCode = 510
	ErrCode_StatusNetworkAuthenticationRequired ErrCode = 511
	// 1000 -	2000	core 占用
	ErrCode_ServerNotFound          ErrCode = 1000
	ErrCode_ServerNodeNotFound      ErrCode = 1001
	ErrCode_ServerAliveNodeNotFound ErrCode = 1002
	ErrCode_ConfigNotFound          ErrCode = 1003
)

// Enum value maps for ErrCode.
var (
	ErrCode_name = map[int32]string{
		0:    "Success",
		100:  "StatusContinue",
		101:  "StatusSwitchingProtocols",
		102:  "StatusProcessing",
		103:  "StatusEarlyHints",
		200:  "StatusOK",
		201:  "StatusCreated",
		202:  "StatusAccepted",
		203:  "StatusNonAuthoritativeInfo",
		204:  "StatusNoContent",
		205:  "StatusResetContent",
		206:  "StatusPartialContent",
		207:  "StatusMultiStatus",
		208:  "StatusAlreadyReported",
		226:  "StatusIMUsed",
		300:  "StatusMultipleChoices",
		301:  "StatusMovedPermanently",
		302:  "StatusFound",
		303:  "StatusSeeOther",
		304:  "StatusNotModified",
		305:  "StatusUseProxy",
		307:  "StatusTemporaryRedirect",
		308:  "StatusPermanentRedirect",
		400:  "StatusBadRequest",
		401:  "StatusUnauthorized",
		402:  "StatusPaymentRequired",
		403:  "StatusForbidden",
		404:  "StatusNotFound",
		405:  "StatusMethodNotAllowed",
		406:  "StatusNotAcceptable",
		407:  "StatusProxyAuthRequired",
		408:  "StatusRequestTimeout",
		409:  "StatusConflict",
		410:  "StatusGone",
		411:  "StatusLengthRequired",
		412:  "StatusPreconditionFailed",
		413:  "StatusRequestEntityTooLarge",
		414:  "StatusRequestURITooLong",
		415:  "StatusUnsupportedMediaType",
		416:  "StatusRequestedRangeNotSatisfiable",
		417:  "StatusExpectationFailed",
		418:  "StatusTeapot",
		421:  "StatusMisdirectedRequest",
		422:  "StatusUnprocessableEntity",
		423:  "StatusLocked",
		424:  "StatusFailedDependency",
		425:  "StatusTooEarly",
		426:  "StatusUpgradeRequired",
		428:  "StatusPreconditionRequired",
		429:  "StatusTooManyRequests",
		431:  "StatusRequestHeaderFieldsTooLarge",
		451:  "StatusUnavailableForLegalReasons",
		500:  "StatusInternalServerError",
		501:  "StatusNotImplemented",
		502:  "StatusBadGateway",
		503:  "StatusServiceUnavailable",
		504:  "StatusGatewayTimeout",
		505:  "StatusHTTPVersionNotSupported",
		506:  "StatusVariantAlsoNegotiates",
		507:  "StatusInsufficientStorage",
		508:  "StatusLoopDetected",
		510:  "StatusNotExtended",
		511:  "StatusNetworkAuthenticationRequired",
		1000: "ServerNotFound",
		1001: "ServerNodeNotFound",
		1002: "ServerAliveNodeNotFound",
		1003: "ConfigNotFound",
	}
	ErrCode_value = map[string]int32{
		"Success":                             0,
		"StatusContinue":                      100,
		"StatusSwitchingProtocols":            101,
		"StatusProcessing":                    102,
		"StatusEarlyHints":                    103,
		"StatusOK":                            200,
		"StatusCreated":                       201,
		"StatusAccepted":                      202,
		"StatusNonAuthoritativeInfo":          203,
		"StatusNoContent":                     204,
		"StatusResetContent":                  205,
		"StatusPartialContent":                206,
		"StatusMultiStatus":                   207,
		"StatusAlreadyReported":               208,
		"StatusIMUsed":                        226,
		"StatusMultipleChoices":               300,
		"StatusMovedPermanently":              301,
		"StatusFound":                         302,
		"StatusSeeOther":                      303,
		"StatusNotModified":                   304,
		"StatusUseProxy":                      305,
		"StatusTemporaryRedirect":             307,
		"StatusPermanentRedirect":             308,
		"StatusBadRequest":                    400,
		"StatusUnauthorized":                  401,
		"StatusPaymentRequired":               402,
		"StatusForbidden":                     403,
		"StatusNotFound":                      404,
		"StatusMethodNotAllowed":              405,
		"StatusNotAcceptable":                 406,
		"StatusProxyAuthRequired":             407,
		"StatusRequestTimeout":                408,
		"StatusConflict":                      409,
		"StatusGone":                          410,
		"StatusLengthRequired":                411,
		"StatusPreconditionFailed":            412,
		"StatusRequestEntityTooLarge":         413,
		"StatusRequestURITooLong":             414,
		"StatusUnsupportedMediaType":          415,
		"StatusRequestedRangeNotSatisfiable":  416,
		"StatusExpectationFailed":             417,
		"StatusTeapot":                        418,
		"StatusMisdirectedRequest":            421,
		"StatusUnprocessableEntity":           422,
		"StatusLocked":                        423,
		"StatusFailedDependency":              424,
		"StatusTooEarly":                      425,
		"StatusUpgradeRequired":               426,
		"StatusPreconditionRequired":          428,
		"StatusTooManyRequests":               429,
		"StatusRequestHeaderFieldsTooLarge":   431,
		"StatusUnavailableForLegalReasons":    451,
		"StatusInternalServerError":           500,
		"StatusNotImplemented":                501,
		"StatusBadGateway":                    502,
		"StatusServiceUnavailable":            503,
		"StatusGatewayTimeout":                504,
		"StatusHTTPVersionNotSupported":       505,
		"StatusVariantAlsoNegotiates":         506,
		"StatusInsufficientStorage":           507,
		"StatusLoopDetected":                  508,
		"StatusNotExtended":                   510,
		"StatusNetworkAuthenticationRequired": 511,
		"ServerNotFound":                      1000,
		"ServerNodeNotFound":                  1001,
		"ServerAliveNodeNotFound":             1002,
		"ConfigNotFound":                      1003,
	}
)

func (x ErrCode) Enum() *ErrCode {
	p := new(ErrCode)
	*p = x
	return p
}

func (x ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[0].Descriptor()
}

func (ErrCode) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[0]
}

func (x ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrCode.Descriptor instead.
func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{0}
}

type DiscoveryType int32

const (
	DiscoveryType_Lazy   DiscoveryType = 0
	DiscoveryType_Etcd   DiscoveryType = 1
	DiscoveryType_Consul DiscoveryType = 2
	DiscoveryType_Nacos  DiscoveryType = 3
)

// Enum value maps for DiscoveryType.
var (
	DiscoveryType_name = map[int32]string{
		0: "Lazy",
		1: "Etcd",
		2: "Consul",
		3: "Nacos",
	}
	DiscoveryType_value = map[string]int32{
		"Lazy":   0,
		"Etcd":   1,
		"Consul": 2,
		"Nacos":  3,
	}
)

func (x DiscoveryType) Enum() *DiscoveryType {
	p := new(DiscoveryType)
	*p = x
	return p
}

func (x DiscoveryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscoveryType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[1].Descriptor()
}

func (DiscoveryType) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[1]
}

func (x DiscoveryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscoveryType.Descriptor instead.
func (DiscoveryType) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{1}
}

type ServiceType int32

const (
	ServiceType_Service ServiceType = 0
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "Service",
	}
	ServiceType_value = map[string]int32{
		"Service": 0,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[2].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[2]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{2}
}

type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *anypb.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Hint    string     `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{0}
}

func (x *BaseResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BaseResponse) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BaseResponse) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

type RawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *RawReq) Reset() {
	*x = RawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawReq) ProtoMessage() {}

func (x *RawReq) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawReq.ProtoReflect.Descriptor instead.
func (*RawReq) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{1}
}

func (x *RawReq) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type RawRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// 不填会按照纯文本处理
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (x *RawRsp) Reset() {
	*x = RawRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawRsp) ProtoMessage() {}

func (x *RawRsp) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawRsp.ProtoReflect.Descriptor instead.
func (*RawRsp) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{2}
}

func (x *RawRsp) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RawRsp) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type ServiceDiscoveryClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscoveryType DiscoveryType `protobuf:"varint,1,opt,name=discovery_type,json=discoveryType,proto3,enum=lazygophers.lrpc.core.DiscoveryType" json:"discovery_type,omitempty"`
	// 当 type = none 时生效
	Url         []string             `protobuf:"bytes,2,rep,name=url,proto3" json:"url,omitempty"`
	ServiceName string               `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServicePath string               `protobuf:"bytes,4,opt,name=service_path,json=servicePath,proto3" json:"service_path,omitempty"`
	Method      string               `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	Timeout     *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ServiceDiscoveryClient) Reset() {
	*x = ServiceDiscoveryClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDiscoveryClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDiscoveryClient) ProtoMessage() {}

func (x *ServiceDiscoveryClient) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDiscoveryClient.ProtoReflect.Descriptor instead.
func (*ServiceDiscoveryClient) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceDiscoveryClient) GetDiscoveryType() DiscoveryType {
	if x != nil {
		return x.DiscoveryType
	}
	return DiscoveryType_Lazy
}

func (x *ServiceDiscoveryClient) GetUrl() []string {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ServiceDiscoveryClient) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServiceDiscoveryClient) GetServicePath() string {
	if x != nil {
		return x.ServicePath
	}
	return ""
}

func (x *ServiceDiscoveryClient) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ServiceDiscoveryClient) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type ServiceDiscoveryService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string                  `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	NodeList    []*ServiceDiscoveryNode `protobuf:"bytes,2,rep,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
}

func (x *ServiceDiscoveryService) Reset() {
	*x = ServiceDiscoveryService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDiscoveryService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDiscoveryService) ProtoMessage() {}

func (x *ServiceDiscoveryService) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDiscoveryService.ProtoReflect.Descriptor instead.
func (*ServiceDiscoveryService) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceDiscoveryService) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServiceDiscoveryService) GetNodeList() []*ServiceDiscoveryNode {
	if x != nil {
		return x.NodeList
	}
	return nil
}

type ServiceDiscoveryNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     ServiceType `protobuf:"varint,1,opt,name=type,proto3,enum=lazygophers.lrpc.core.ServiceType" json:"type,omitempty"`
	Host     string      `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port     string      `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Username string      `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password string      `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Alive    bool        `protobuf:"varint,6,opt,name=alive,proto3" json:"alive,omitempty"`
}

func (x *ServiceDiscoveryNode) Reset() {
	*x = ServiceDiscoveryNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDiscoveryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDiscoveryNode) ProtoMessage() {}

func (x *ServiceDiscoveryNode) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDiscoveryNode.ProtoReflect.Descriptor instead.
func (*ServiceDiscoveryNode) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{5}
}

func (x *ServiceDiscoveryNode) GetType() ServiceType {
	if x != nil {
		return x.Type
	}
	return ServiceType_Service
}

func (x *ServiceDiscoveryNode) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ServiceDiscoveryNode) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *ServiceDiscoveryNode) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ServiceDiscoveryNode) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ServiceDiscoveryNode) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

// 分布式配置
type ConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Version int64  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ConfigItem) Reset() {
	*x = ConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigItem) ProtoMessage() {}

func (x *ConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigItem.ProtoReflect.Descriptor instead.
func (*ConfigItem) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConfigItem) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ConfigItem) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 分页
type ListOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset    uint64               `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     uint64               `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ShowTotal bool                 `protobuf:"varint,3,opt,name=show_total,json=showTotal,proto3" json:"show_total,omitempty"`
	Options   []*ListOption_Option `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *ListOption) Reset() {
	*x = ListOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOption) ProtoMessage() {}

func (x *ListOption) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOption.ProtoReflect.Descriptor instead.
func (*ListOption) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{7}
}

func (x *ListOption) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListOption) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListOption) GetShowTotal() bool {
	if x != nil {
		return x.ShowTotal
	}
	return false
}

func (x *ListOption) GetOptions() []*ListOption_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type Paginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Total  uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Paginate) Reset() {
	*x = Paginate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paginate) ProtoMessage() {}

func (x *Paginate) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paginate.ProtoReflect.Descriptor instead.
func (*Paginate) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{8}
}

func (x *Paginate) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Paginate) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Paginate) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 代码生成
type Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method *string `protobuf:"bytes,1,opt,name=method,proto3,oneof" json:"method,omitempty"`
	Path   *string `protobuf:"bytes,2,opt,name=path,proto3,oneof" json:"path,omitempty"`
}

func (x *Http) Reset() {
	*x = Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http) ProtoMessage() {}

func (x *Http) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http.ProtoReflect.Descriptor instead.
func (*Http) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{9}
}

func (x *Http) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *Http) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type LazyGen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role           string   `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	SkipGenRoute   bool     `protobuf:"varint,2,opt,name=skip_gen_route,json=skipGenRoute,proto3" json:"skip_gen_route,omitempty"`
	BeforeHandlers []string `protobuf:"bytes,3,rep,name=before_handlers,json=beforeHandlers,proto3" json:"before_handlers,omitempty"`
	AfterHandlers  []string `protobuf:"bytes,4,rep,name=after_handlers,json=afterHandlers,proto3" json:"after_handlers,omitempty"`
}

func (x *LazyGen) Reset() {
	*x = LazyGen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LazyGen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LazyGen) ProtoMessage() {}

func (x *LazyGen) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LazyGen.ProtoReflect.Descriptor instead.
func (*LazyGen) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{10}
}

func (x *LazyGen) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *LazyGen) GetSkipGenRoute() bool {
	if x != nil {
		return x.SkipGenRoute
	}
	return false
}

func (x *LazyGen) GetBeforeHandlers() []string {
	if x != nil {
		return x.BeforeHandlers
	}
	return nil
}

func (x *LazyGen) GetAfterHandlers() []string {
	if x != nil {
		return x.AfterHandlers
	}
	return nil
}

type ListOption_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   int32  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ListOption_Option) Reset() {
	*x = ListOption_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOption_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOption_Option) ProtoMessage() {}

func (x *ListOption_Option) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOption_Option.ProtoReflect.Descriptor instead.
func (*ListOption_Option) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListOption_Option) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ListOption_Option) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var file_core_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Http)(nil),
		Field:         60000,
		Name:          "lazygophers.lrpc.core.http",
		Tag:           "bytes,60000,opt,name=http",
		Filename:      "core.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*LazyGen)(nil),
		Field:         60001,
		Name:          "lazygophers.lrpc.core.lazygen",
		Tag:           "bytes,60001,opt,name=lazygen",
		Filename:      "core.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         60000,
		Name:          "lazygophers.lrpc.core.port",
		Tag:           "varint,60000,opt,name=port",
		Filename:      "core.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60001,
		Name:          "lazygophers.lrpc.core.host",
		Tag:           "bytes,60001,opt,name=host",
		Filename:      "core.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional lazygophers.lrpc.core.Http http = 60000;
	E_Http = &file_core_proto_extTypes[0]
	// optional lazygophers.lrpc.core.LazyGen lazygen = 60001;
	E_Lazygen = &file_core_proto_extTypes[1]
)

// Extension fields to descriptorpb.FileOptions.
var (
	// optional int32 port = 60000;
	E_Port = &file_core_proto_extTypes[2]
	// 指定 ip
	// local/localhostt(相当于 127.0.0.1)
	// lan 内网 ip
	// */all （相当于 0.0.0.0）默认为这个
	//
	// optional string host = 60001;
	E_Host = &file_core_proto_extTypes[3]
)

var File_core_proto protoreflect.FileDescriptor

var file_core_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x61,
	0x7a, 0x79, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x2e, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7a, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x1c, 0x0a, 0x06,
	0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x3f, 0x0a, 0x06, 0x52, 0x61,
	0x77, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x16,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x2e, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x61, 0x7a,
	0x79, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x2e, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x67,
	0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x2e, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x67, 0x6f, 0x70, 0x68,
	0x65, 0x72, 0x73, 0x2e, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x30, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x08, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x50, 0x0a, 0x04, 0x48, 0x74,
	0x74, 0x70, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x93, 0x01, 0x0a,
	0x07, 0x4c, 0x61, 0x7a, 0x79, 0x47, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x47, 0x65, 0x6e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x73, 0x2a, 0x83, 0x0e, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x10, 0x64, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x10, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x10, 0x66, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x61, 0x72,
	0x6c, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x10, 0x67, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4f, 0x4b, 0x10, 0xc8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0xc9, 0x01, 0x12, 0x13, 0x0a, 0x0e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0xca,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x6e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10,
	0xcb, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0xcc, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0xcd,
	0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0xce, 0x01, 0x12, 0x16, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0xcf, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0xd0, 0x01,
	0x12, 0x11, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x4d, 0x55, 0x73, 0x65, 0x64,
	0x10, 0xe2, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x10, 0xac, 0x02, 0x12,
	0x1b, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x10, 0xad, 0x02, 0x12, 0x10, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xae, 0x02, 0x12, 0x13,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0xaf, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0xb0, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x10, 0xb1, 0x02,
	0x12, 0x1c, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0xb3, 0x02, 0x12, 0x1c,
	0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0xb4, 0x02, 0x12, 0x15, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x90, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x91, 0x03, 0x12, 0x1a, 0x0a, 0x15,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x92, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x10, 0x93, 0x03, 0x12, 0x13,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0x94, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x95, 0x03,
	0x12, 0x18, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x96, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x97, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x98, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x10, 0x99, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x47, 0x6f, 0x6e, 0x65, 0x10, 0x9a, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x10, 0x9b, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x9c, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x10, 0x9d, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x52, 0x49, 0x54, 0x6f, 0x6f, 0x4c, 0x6f, 0x6e, 0x67,
	0x10, 0x9e, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x9f, 0x03, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x53,
	0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x10, 0xa0, 0x03, 0x12, 0x1c, 0x0a,
	0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xa1, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x61, 0x70, 0x6f, 0x74, 0x10, 0xa2, 0x03, 0x12, 0x1d,
	0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x69, 0x73, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xa5, 0x03, 0x12, 0x1e, 0x0a,
	0x19, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0xa6, 0x03, 0x12, 0x11, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0xa7, 0x03,
	0x12, 0x1b, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x10, 0xa8, 0x03, 0x12, 0x13, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x6f, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x10,
	0xa9, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0xaa, 0x03, 0x12, 0x1f,
	0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0xac, 0x03, 0x12,
	0x1a, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x10, 0xad, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x10, 0xaf, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x10, 0xc3, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xf4, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x10, 0xf5, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x61, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x10, 0xf6, 0x03, 0x12, 0x1d, 0x0a, 0x18,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0xf7, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x10, 0xf8, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x54, 0x54, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0xf9, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x6c, 0x73, 0x6f, 0x4e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x10, 0xfa, 0x03, 0x12, 0x1e, 0x0a, 0x19,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0xfb, 0x03, 0x12, 0x17, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0xfc, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0xfe, 0x03, 0x12, 0x28, 0x0a,
	0x23, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x10, 0xff, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xe8, 0x07, 0x12, 0x17, 0x0a, 0x12,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0xe9, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0xea, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xeb, 0x07, 0x2a, 0x3a, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x61, 0x7a,
	0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x74, 0x63, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x61, 0x63,
	0x6f, 0x73, 0x10, 0x03, 0x2a, 0x1a, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x00,
	0x3a, 0x54, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x2e, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x88, 0x01, 0x01, 0x3a, 0x5d, 0x0a, 0x07, 0x6c, 0x61, 0x7a, 0x79, 0x67, 0x65,
	0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xe1, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x61, 0x7a, 0x79,
	0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x2e, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4c, 0x61, 0x7a, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x07, 0x6c, 0x61, 0x7a, 0x79, 0x67,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x35, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0, 0xd4, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x35, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xe1, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x30, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6c, 0x61, 0x7a, 0x79, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x72,
	0x70, 0x63, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_proto_rawDescOnce sync.Once
	file_core_proto_rawDescData = file_core_proto_rawDesc
)

func file_core_proto_rawDescGZIP() []byte {
	file_core_proto_rawDescOnce.Do(func() {
		file_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_proto_rawDescData)
	})
	return file_core_proto_rawDescData
}

var file_core_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_core_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_core_proto_goTypes = []interface{}{
	(ErrCode)(0),                       // 0: lazygophers.lrpc.core.ErrCode
	(DiscoveryType)(0),                 // 1: lazygophers.lrpc.core.DiscoveryType
	(ServiceType)(0),                   // 2: lazygophers.lrpc.core.ServiceType
	(*BaseResponse)(nil),               // 3: lazygophers.lrpc.core.BaseResponse
	(*RawReq)(nil),                     // 4: lazygophers.lrpc.core.RawReq
	(*RawRsp)(nil),                     // 5: lazygophers.lrpc.core.RawRsp
	(*ServiceDiscoveryClient)(nil),     // 6: lazygophers.lrpc.core.ServiceDiscoveryClient
	(*ServiceDiscoveryService)(nil),    // 7: lazygophers.lrpc.core.ServiceDiscoveryService
	(*ServiceDiscoveryNode)(nil),       // 8: lazygophers.lrpc.core.ServiceDiscoveryNode
	(*ConfigItem)(nil),                 // 9: lazygophers.lrpc.core.ConfigItem
	(*ListOption)(nil),                 // 10: lazygophers.lrpc.core.ListOption
	(*Paginate)(nil),                   // 11: lazygophers.lrpc.core.Paginate
	(*Http)(nil),                       // 12: lazygophers.lrpc.core.Http
	(*LazyGen)(nil),                    // 13: lazygophers.lrpc.core.LazyGen
	(*ListOption_Option)(nil),          // 14: lazygophers.lrpc.core.ListOption.Option
	(*anypb.Any)(nil),                  // 15: google.protobuf.Any
	(*durationpb.Duration)(nil),        // 16: google.protobuf.Duration
	(*descriptorpb.MethodOptions)(nil), // 17: google.protobuf.MethodOptions
	(*descriptorpb.FileOptions)(nil),   // 18: google.protobuf.FileOptions
}
var file_core_proto_depIdxs = []int32{
	15, // 0: lazygophers.lrpc.core.BaseResponse.data:type_name -> google.protobuf.Any
	1,  // 1: lazygophers.lrpc.core.ServiceDiscoveryClient.discovery_type:type_name -> lazygophers.lrpc.core.DiscoveryType
	16, // 2: lazygophers.lrpc.core.ServiceDiscoveryClient.timeout:type_name -> google.protobuf.Duration
	8,  // 3: lazygophers.lrpc.core.ServiceDiscoveryService.node_list:type_name -> lazygophers.lrpc.core.ServiceDiscoveryNode
	2,  // 4: lazygophers.lrpc.core.ServiceDiscoveryNode.type:type_name -> lazygophers.lrpc.core.ServiceType
	14, // 5: lazygophers.lrpc.core.ListOption.options:type_name -> lazygophers.lrpc.core.ListOption.Option
	17, // 6: lazygophers.lrpc.core.http:extendee -> google.protobuf.MethodOptions
	17, // 7: lazygophers.lrpc.core.lazygen:extendee -> google.protobuf.MethodOptions
	18, // 8: lazygophers.lrpc.core.port:extendee -> google.protobuf.FileOptions
	18, // 9: lazygophers.lrpc.core.host:extendee -> google.protobuf.FileOptions
	12, // 10: lazygophers.lrpc.core.http:type_name -> lazygophers.lrpc.core.Http
	13, // 11: lazygophers.lrpc.core.lazygen:type_name -> lazygophers.lrpc.core.LazyGen
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	10, // [10:12] is the sub-list for extension type_name
	6,  // [6:10] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_core_proto_init() }
func file_core_proto_init() {
	if File_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDiscoveryClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDiscoveryService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDiscoveryNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paginate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LazyGen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOption_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_core_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_core_proto_goTypes,
		DependencyIndexes: file_core_proto_depIdxs,
		EnumInfos:         file_core_proto_enumTypes,
		MessageInfos:      file_core_proto_msgTypes,
		ExtensionInfos:    file_core_proto_extTypes,
	}.Build()
	File_core_proto = out.File
	file_core_proto_rawDesc = nil
	file_core_proto_goTypes = nil
	file_core_proto_depIdxs = nil
}
